generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String         @unique
  image         String?
  password      String?
  phone         String?
  role          UserRole       @default(CUSTOMER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  bookings      Booking[]
  notifications Notification[]
  reviews       Review[]       @relation("UserReviews")
  sessions      Session[]
  technician    Technician?
  services      Service[]      @relation("UserServices")
}

model Service {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Float
  duration     Int
  category     String
  technicianId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  bookings     Booking[]
  images       Image[]
  reviews      Review[]   @relation("ServiceReviews")
  technician   Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  users        User[]     @relation("UserServices")
}

model Booking {
  id           String        @id @default(cuid())
  date         DateTime
  startTime    String
  endTime      String
  status       BookingStatus @default(PENDING)
  amount       Float
  technicianId String
  serviceId    String
  customerId   String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  customer     User          @relation(fields: [customerId], references: [id])
  service      Service       @relation(fields: [serviceId], references: [id])
  technician   Technician    @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  payment      Payment?
  review       Review?
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String        @unique
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  booking       Booking       @relation(fields: [bookingId], references: [id])
}

model Review {
  id           String     @id @default(cuid())
  rating       Int
  comment      String
  bookingId    String     @unique
  technicianId String
  userId       String
  serviceId    String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  booking      Booking    @relation(fields: [bookingId], references: [id])
  service      Service    @relation("ServiceReviews", fields: [serviceId], references: [id])
  technician   Technician @relation(fields: [technicianId], references: [id], onDelete: Cascade)
  user         User       @relation("UserReviews", fields: [userId], references: [id])
}

model Image {
  id        String   @id @default(cuid())
  serviceId String
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Technician {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  phone          String
  address        String
  city           String
  state          String
  zipCode        String
  bio            String?
  profileImage   String?
  specialties    String[]
  experience     Int       @default(0)
  certifications String[]
  availability   Json      @default("{\"friday\": false, \"monday\": false, \"sunday\": false, \"tuesday\": false, \"saturday\": false, \"thursday\": false, \"wednesday\": false}")
  workingHours   Json      @default("{\"end\": \"17:00\", \"start\": \"09:00\"}")
  averageRating  Float     @default(0)
  totalRatings   Int       @default(0)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String    @unique
  bookings       Booking[]
  reviews        Review[]
  services       Service[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  TECHNICIAN
  CUSTOMER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  MPESA
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
